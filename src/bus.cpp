/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bus.cpp                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nforay <nforay@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/16 20:09:43 by nforay            #+#    #+#             */
/*   Updated: 2022/03/31 15:33:16 by nforay           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "bus.hpp"

Bus::Bus() { SPDLOG_TRACE("Bus Constructor"); }

Bus::~Bus() { SPDLOG_TRACE("Bus Destructor"); }

void Bus::write(const uint16_t &addr, const uint8_t data) {
    if (addr >= 0x0000 && addr <= 0xFFFF) {
        SPDLOG_TRACE("Bus write: 0x{:04X} = 0x{:02X}", addr, data);
        _ram[addr] = data;
    } else {
        SPDLOG_ERROR("Attempt to write in unmapped memory: 0x{:04X} = 0x{:02X}", addr, data);
    }
}

uint8_t Bus::read(const uint16_t &addr) const {
    if (addr < 0x0100) {
        return _bootrom[addr];
    } else if (addr >= 0x0000 && addr <= 0x7FFF) {
        SPDLOG_TRACE("Bus read: 0x{:04X} = 0x{:02X}", addr, _ram[addr]);
        return _cartridge->read(addr);
    } else if (addr >= 0x8000 && addr <= 0xFFFF) {
        SPDLOG_TRACE("Bus read: 0x{:04X} = 0x{:02X}", addr, _ram[addr]);
        return _ram[addr];
    } else {
        SPDLOG_ERROR("Attempt to read in unmapped memory: 0x{:04X}", addr);
        return 0x00;
    }
}

void Bus::reset() {
    SPDLOG_TRACE("Bus reset");
    _ram.fill(0x00);
    _ram[0xFF10] = 0x80;
    _ram[0xFF11] = 0xBF;
    _ram[0xFF12] = 0xF3;
    _ram[0xFF14] = 0xBF;
    _ram[0xFF16] = 0x3F;
    _ram[0xFF19] = 0xBF;
    _ram[0xFF1A] = 0x7F;
    _ram[0xFF1B] = 0xFF;
    _ram[0xFF1C] = 0x9F;
    _ram[0xFF1E] = 0xBF;
    _ram[0xFF20] = 0xFF;
    _ram[0xFF21] = 0x00;
    _ram[0xFF24] = 0x77;
    _ram[0xFF25] = 0xF3;
    _ram[0xFF26] = 0xF1;
    _ram[0xFF40] = 0x91;
    _ram[0xFF47] = 0xFC;
    _ram[0xFF48] = 0xFF;
    _ram[0xFF49] = 0xFF;
    /* clang-format off */
    _bootrom = {
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
    };
    /* clang-format on */
}
